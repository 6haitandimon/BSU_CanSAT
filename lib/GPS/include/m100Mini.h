#pragma once#include "pico/stdlib.h"#include "hardware/uart.h"#include "hardware/irq.h"#include <cstring>#define GPS_BUFFER_SIZE 64#define GPS_PACKET_SIZE 36namespace GPS {struct NAV_POSLLH {  uint16_t header = 0; // header  uint8_t cls = 0;     // Class                                     "0x01"  uint8_t id = 0;      // ID                                        "0x02"  uint16_t len = 0;    // Length (Bytes)                            "28"  uint32_t iTOW = 0;   // GPS time of week of the navigation epoch  "ms"  int32_t lon = 0;     // Longitude                                 "deg"  int32_t lat = 0;     // Latitude                                  "deg"  int32_t height = 0;  // Height above ellipsoid                    "mm"  int32_t hMSL = 0;    // Height above mean sea level               "mm"  uint32_t hAcc = 0;   // Horizontal accuracy estimate              "mm"  uint32_t vAcc = 0;   // Vertical accuracy estimate                "mm"  uint16_t CTS = 0; // controll sum} __packed;class M100Mini {private:  static M100Mini* instance;  uart_inst_t *_uart;  uint8_t _uartTXPin;  uint8_t _uartRXPin;  uint32_t _uartBauRate;  uint8_t gps_rx_buffer[GPS_BUFFER_SIZE];  uint8_t gps_packet[GPS_PACKET_SIZE];  uint8_t gps_rx_index = 0;  bool gps_packet_ready = false;private:  void GpsIrqHandler();  static void StaticGpsIrqHandler();  bool CalculateChecksum(const uint8_t *data, size_t len);public:  M100Mini(uart_inst_t *uart, uint8_t uartTXPin, uint8_t uartRXPin,           uint32_t uartBauRate);  void m100Mini_Init();  bool GetGPS(GPS::NAV_POSLLH *gpsStruct);  };}